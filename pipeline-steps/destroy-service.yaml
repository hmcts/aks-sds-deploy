parameters:
  environment: ''
  location: ''
  stack: ''
  project: ''
  tfInitSub: ''
  targetCommand: ''
  builtFrom: ''
  product: ''

steps:
  - template: keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      environment: ${{ parameters.environment }}

  - task: TerraformCLI@0
    displayName: Terraform init
    inputs:
          command: init
          workingDirectory: '$(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}'
          backendType: azurerm
          backendServiceArm: $(serviceconnection)
          backendAzureRmResourceGroupName: 'azure-control-$(env)-rg'
          backendAzureRmResourceGroupLocation: ${{ parameters.location }}
          backendAzureRmStorageAccountName: $(controlStorageAccount)
          backendAzureRmStorageAccountSku: Standard_LRS
          backendAzureRmContainerName: subscription-tfstate
          backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/$(env)/${{ parameters.stack }}/terraform.tfstate'
          commandOptions: '-backend-config=subscription_id=${{ parameters.tfInitSub }} -var builtFrom=${{ parameters.builtFrom }} -var product=${{ parameters.product }}'

  - task: TerraformCLI@0
    displayName: Terraform validate
    inputs:
          command: validate
          workingDirectory: $(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}

  - task: TerraformCLI@0
    displayName: Terraform destroy
    condition: and(succeeded(), eq(variables['action'], 'Destroy'))
    inputs:
      command: destroy
      workingDirectory: $(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}
      environmentServiceName: $(serviceconnection)
      commandOptions: '-var control_vault=$(controlKeyVault) -var environment=$(env) -var builtFrom=${{ parameters.builtFrom }} -var product=${{ parameters.product }} -var project=$(project) -var-file $(System.DefaultWorkingDirectory)/environments/${{ parameters.stack }}/$(env).tfvars ${{ parameters.targetCommand }}'
