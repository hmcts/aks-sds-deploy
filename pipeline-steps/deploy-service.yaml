parameters:
  environment: ''
  location: ''
  stack: ''
  project: ''
  tfversion: ''
  tfvars: ''
  tfInitSub: ''
  targetCommand: ''
  builtFrom: ''
  product: ''

steps:

  - template: keyvault-read.yaml
    parameters:
      serviceConnection: $(serviceConnection)
      environment: ${{ parameters.environment }}

  - task: TerraformInstaller@0
    displayName: 'Install Terraform ${{ parameters.tfversion }}'
    inputs:
      terraformVersion: ${{ parameters.tfversion }}

  - task: TerraformCLI@0
    displayName: Terraform init
    inputs:
      command: init
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: '$(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}'
      backendType: azurerm
      backendServiceArm: $(serviceConnection)
      backendAzureRmResourceGroupName: 'azure-control-$(env)-rg'
      backendAzureRmResourceGroupLocation: ${{ parameters.location }}
      backendAzureRmStorageAccountName: $(controlStorageAccount)
      backendAzureRmStorageAccountSku: Standard_LRS
      backendAzureRmContainerName: subscription-tfstate
      backendAzureRmKey: '${{ parameters.location }}/${{ parameters.project }}/$(env)/${{ parameters.stack }}/terraform.tfstate'
      commandOptions: '-backend-config=subscription_id=${{ parameters.tfInitSub }} -var builtFrom=${{ parameters.builtFrom }} -var product=${{ parameters.product }}'

  - task: TerraformCLI@0
    displayName: Terraform validate
    inputs:
      command: validate
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: $(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}

  - task: TerraformCLI@0
    displayName: Terraform plan
    inputs:
      command: plan
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: $(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}
      environmentServiceName: $(serviceConnection)
      commandOptions: '-out=tfplan-${{ parameters.project }}-$(env)-${{ parameters.stack }} -var control_vault=$(controlKeyVault) -var environment=$(env) -var project=$(project) -var builtFrom=${{ parameters.builtFrom }} -var product=${{ parameters.product }} -var-file $(System.DefaultWorkingDirectory)/environments/${{ parameters.stack }}/$(env).tfvars ${{ parameters.targetCommand }}'

  - task: TerraformCLI@0
    displayName: Terraform apply
    condition: and(succeeded(), eq(variables['Action'], 'Apply'))
    inputs:
      command: apply
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: $(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}
      environmentServiceName: $(serviceConnection)
      commandOptions: '--auto-approve tfplan-${{ parameters.project }}-$(env)-${{ parameters.stack }}'

  - task: TerraformCLI@0
    displayName: Terraform output
    inputs:
      command: output
      terraformVersion: ${{ parameters.tfversion }}
      workingDirectory: $(System.DefaultWorkingDirectory)/components/${{ parameters.stack }}
      environmentServiceName: $(serviceConnection)

  - script: |
      echo "Setting clusterNumbers variable to $clusters"
      echo "##vso[task.setvariable variable=clusterNumbers;isOutput=true]$clusters"
    name: setClusterNumbers
    env:
      clusters: $(TF_OUT_CLUSTERS)