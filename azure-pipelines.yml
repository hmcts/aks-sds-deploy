name: ${{ parameters.overrideAction }} - ${{ parameters.env }}.${{ parameters.cluster }}.${{ parameters.location }}

trigger:
  batch: true
  branches:
    include:
    - master

resources:
  repositories:
  - repository: cnp-azuredevops-libraries
    type: github
    ref: master
    name: hmcts/cnp-azuredevops-libraries
    endpoint: 'hmcts-PlatformOperations'

variables:
  - name: agentPool
    value: "ubuntu-latest" 
  - name: build
    value: $(Build.BuildNumber)
  - name: product
    value: "sds-platform"
  - name: terraformInitSubscription
    value: 04d27a32-7a07-48b3-95b8-3c8691e1a263
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries
  - name: serviceConnection
    value: OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  - name: action
    value: ${{ parameters.overrideAction }}
  - name: project
    value: ss

parameters:
  - name: overrideAction
    displayName: Action
    type: string
    default: "plan"
    values:
      - plan
      - apply


  - name: cluster
    displayName: Cluster
    type: string
    default: "All"
    values:
      - "All"
      - "00"
      - "01"

  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"
      - "UK West"

  - name: env
    displayName: Environment
    type: string
    default: "sbox"
    values:
      - ithc
      - dev
      - demo
      - sbox
      - ptlsbox
      - test
      - stg
      - ptl
      - prod
      
  - name: environment_components
    type: object
    default:
    - deployment: demoGenesis
      environment: demo
      component: "00-genesis"
    
    - deployment: demoNetworkRg
      environment: demo
      component: "07-network-rg"
      dependsOn:
        - demoGenesis

    - deployment: demoNetwork
      environment: demo
      component: "01-network"
      dependsOn:
        - demoNetworkRg
    
    - deployment: demoMis
      environment: demo
      component: "05-mis"
      dependsOn:
        - demoNetwork

    - deployment: demoAks
      environment: demo
      component: "aks"
      dependsOn:
        - demoMis

    - deployment: devGenesis
      environment: dev
      component: "00-genesis"
 
    - deployment: devNetworkRg
      environment: dev
      component: "07-network-rg"
      dependsOn:
        - devGenesis

    - deployment: devNetwork
      environment: dev
      component: "01-network"
      dependsOn:
        - devNetworkRg
    
    - deployment: devMis
      environment: dev
      component: "05-mis"
      dependsOn:
        - devNetwork

    - deployment: devAks
      environment: dev
      component: "aks"
      dependsOn:
        - devMis

    - deployment: ithcGenesis
      environment: ithc
      component: "00-genesis"

    - deployment:  ithcNetworkRg
      environment:  ithc
      component: "07-network-rg"
      dependsOn:
        - ithcGenesis

    - deployment:  ithcNetwork
      environment:  ithc
      component: "01-network"
      dependsOn:
        - ithcNetworkRg
    
    - deployment:  ithcMis
      environment:  ithc
      component: "05-mis"
      dependsOn:
        - ithcNetwork

    - deployment:  ithcAks
      environment:  ithc
      component: "aks"
      dependsOn:
        - ithcMis

    - deployment: prodGenesis
      environment: prod
      component: "00-genesis"

    - deployment: prodNetworkRg
      environment: prod
      component: "07-network-rg"
      dependsOn:
        - prodGenesis

    - deployment: prodNetwork
      environment: prod
      component: "01-network"
      dependsOn:
        - prodNetworkRg
    
    - deployment: prodMis
      environment: prod
      component: "05-mis"
      dependsOn:
        - prodNetwork

    - deployment: prodAks
      environment: prod
      component: "aks"
      dependsOn:
        - prodMis

    - deployment: ptlGenesis
      environment: ptl
      component: "00-genesis"

    - deployment: ptlNetworkRg
      environment: ptl
      component: "07-network-rg"
      dependsOn:
        -     ptlGenesis

    - deployment:  ptlNetwork
      environment:  ptl
      component: "01-network"
      dependsOn:
        - ptlNetworkRg
    
    - deployment: ptlMis
      environment: ptl
      component: "05-mis"
      dependsOn:
        -  ptlNetwork

    - deployment: ptlAks
      environment: ptl
      component: "aks"
      dependsOn:
        - ptlMis
   
    - deployment: ptlsboxGenesis
      environment: ptlsbox
      component: "00-genesis"

    - deployment:  ptlsboxNetworkRg
      environment: ptlsbox
      component: "07-network-rg"
      dependsOn:
        - ptlsboxGenesis

    - deployment:  ptlsboxNetwork
      environment:  ptlsbox
      component: "01-network"
      dependsOn:
        - ptlsboxNetworkRg
    
    - deployment: ptlsboxMis
      environment: ptlsbox
      component: "05-mis"
      dependsOn:
        - ptlsboxNetwork

    - deployment: ptlsboxAks
      environment: ptlsbox
      component: "aks"
      dependsOn:
        - ptlsboxMis

    - deployment: sboxGenesis
      environment: sbox
      component: "00-genesis"

    - deployment:  sboxNetworkRg
      environment: sbox
      component: "07-network-rg"
      dependsOn:
        - sboxGenesis

    - deployment:  sboxNetwork
      environment:  sbox
      component: "01-network"
      dependsOn:
        - sboxNetworkRg
    
    - deployment: sboxMis
      environment: sbox
      component: "05-mis"
      dependsOn:
      -  sboxNetwork

    - deployment: sboxAks
      environment: sbox
      component: "aks"
      dependsOn:
        - sboxMis
 
    - deployment: stgGenesis
      environment: stg
      component: "00-genesis"

    - deployment: stgNetworkRg
      environment: stg
      component: "07-network-rg"
      dependsOn:
        - stgGenesis

    - deployment: stgNetwork
      environment: stg
      component: "01-network"
      dependsOn:
        -  stgNetworkRg
    
    - deployment: stgMis
      environment: stg
      component: "05-mis"
      dependsOn:
        - stgNetwork

    - deployment: stgAks
      environment: stg
      component: "aks"
      dependsOn:
        - stgMis

    - deployment: testGenesis
      environment: test
      component: "00-genesis"

    - deployment: testNetworkRg
      environment: test
      component: "07-network-rg"
      dependsOn:
        - testGenesis

    - deployment: testNetwork
      environment: test
      component: "01-network"
      dependsOn:
        - testNetworkRg
    
    - deployment: testMis
      environment: test
      component: "05-mis"
      dependsOn:
        - testNetwork

    - deployment: testAks
      environment: test
      component: "aks"
      dependsOn:
        - testMis  

stages:
  - ${{ each deployment in parameters.environment_components }}:
    - ${{ if eq(parameters.env, deployment.environment) }}:
      - stage: ${{ deployment.deployment }}
        dependsOn: ${{ deployment.dependsOn }}
        condition: succeeded()
        jobs:
          - job: TerraformPlanApply
            pool:
              vmImage: ${{ variables.agentPool }}
            steps:
              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.overrideAction }}
                  environment: ${{ deployment.environment }}
                  component: ${{ deployment.component }}
                  serviceConnection: ${{ variables.serviceConnection }}
                  terraformInitSubscription: ${{ variables.terraformInitSubscription }}
                  product: ${{ variables.product }}
                  kvConnectedServiceName: ${{ variables.serviceConnection }}
                  planCommandOptions: >
                    -var project=${{ variables.project }}
                    -var subscription_id=$(ARM_SUBSCRIPTION_ID)
                    -var environment=${{ deployment.environment }}
                    -var control_vault=$(controlKeyVault)
                    -lock=false

      - stage: BootStrapClusters-${{ deployment.deployment }}
        displayName: "BootStrap Clusters"
        dependsOn: ${{ parameters.env }}_aks
        jobs:
          - job: BootStrap
            variables:
              ${{ if eq(parameters['cluster'], 'All') }}:
                clusters: $[ stageDependencies.${{ parameters.env }}_aks.TerraformPlanApply.outputs['setClusterNumbers.clusterNumbers'] ]
              ${{ if ne(parameters['cluster'], 'All') }}:
                clusters: ${{ parameters.cluster }}
            steps:
              - template: pipeline-steps/bootstrap.yaml
                parameters:
                  environment: ${{ parameters.env }}
              
