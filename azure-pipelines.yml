parameters:
  - name: Run_Stage
    displayName: Stage to Run
    type: string
    default: 'Deploy_Full'
    values:
    - Plan
    - Deploy_Full
    - DeployAks
    - BootstrapAks
    - DestroyAks

  - name: cluster
    displayName: Cluster
    type: string
    default: 'All'
    values:
    - 'All'
    - '0'
    - '1'

  - name: location
    displayName: Location
    type: string
    default: 'UK South'
    values:
    - 'UK South'
    - 'UK West'

  - name: env
    displayName: Environment
    type: string
    default: 'SBOX'
    values:
    # - ITHC
    # - DEV
    # - DEMO
    - SBOX
    - PTLSBOX
    # - TEST
    # - STG
    # - PROD


name: HMCTS Shared Services AKS Azure Infrastructure Deployment Pipeline
# TODO refactor pipeline to do plan by default, for now pls no trigger
trigger: none

variables:
  - name: tfversion
    value: 0.15.1
  # If another project comes along and wants to use the same pipeline file then make this a variable in the UI
  # but it might be better to template the pipeline more and have a different pipeline file
  # so that someone doesn't pick the wrong var in the dropdown
  - name: project
    value: ss
  # same comment as above ^^
  - name: serviceConnection
    value: OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  - name: tfInitSub
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: product
    value: 'sds-platform'
  - name: isPlan
    value: $[ eq( parameters['Run_Stage'], "Plan" )]

stages:
  - stage: Genesis
    displayName: 'Genesis'
    condition: contains('${{ parameters.Run_Stage }}', 'Deploy_Full')
    jobs:
      - job: Genesis
        steps:
          - template: pipeline-steps/genesis.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '00-genesis'
              project: $(project)
              tfversion: $(tfversion)
              tfInitSub: ${{ variables.tfInitSub }}
              builtFrom: $(Build.Repository.Name)
              product: ${{ variables.product }}

  - stage: Network
    displayName: 'Network'
    condition: contains('${{ parameters.Run_Stage }}', 'Deploy_Full')
    jobs:
      - job: NetworkRg
        steps:
          - template: pipeline-steps/deploy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '07-network-rg'
              project: $(project)
              tfversion: $(tfversion)
              tfInitSub: ${{ variables.tfInitSub }}
              builtFrom: $(Build.Repository.Name)
              product: ${{ variables.product }}

      - job: DeployInfrastructure
        dependsOn: NetworkRg
        steps:
          - template: pipeline-steps/deploy-network.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '01-network'
              project: $(project)
              tfversion: $(tfversion)
              terraformServiceConnection: OPS-APPROVAL-GATE-MGMT-ENVS
              tfInitSub: ${{ variables.tfInitSub }}
              builtFrom: $(Build.Repository.Name)
              product: ${{ variables.product }}

  - stage: Managed_Identity
    displayName: 'Managed_Identity'
    condition: contains('${{ parameters.Run_Stage }}', 'Deploy_Full')
    dependsOn: Network
    jobs:
      - job: Managed_Identity
        steps:
          - template: pipeline-steps/managed_identity.yaml
            parameters:
              serviceConnection: $(serviceConnection)
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '05-mis'
              project: $(project)
              tfversion: $(tfversion)
              tfInitSub: ${{ variables.tfInitSub }}
              builtFrom: $(Build.Repository.Name)
              product: ${{ variables.product }}

  - stage: Aks
    displayName: 'Deploy AKS clusters'
    condition: or(contains('${{ parameters.Run_Stage }}', 'Deploy_Full'), contains('${{ parameters.Run_Stage }}', 'DeployAks'))
    dependsOn:
      - Managed_Identity
    jobs:
      - job: DeployInfrastructure
        steps:
          - template: pipeline-steps/deploy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: 'aks'
              project: $(project)
              tfversion: $(tfversion)
              tfInitSub: ${{ variables.tfInitSub }}
              builtFrom: $(Build.Repository.Name)
              product: ${{ variables.product }}
              ${{ if eq(parameters['cluster'], 'All') }}:
                targetCommand: ""
              ${{ if ne(parameters['cluster'], 'All') }}:
                targetCommand: "-target module.kubernetes[${{parameters.cluster}}]"
              # ${{ if eq(parameters['cluster'], '01') }}:
              #   targetCommand: "-target module.kubernetes[1]"

  # - stage: BootStrapClusters
  #   displayName: 'BootStrap Clusters'
  #   condition: or(contains('${{ parameters.Run_Stage }}', 'Deploy_Full'), contains('${{ parameters.Run_Stage }}', 'DeployAks'), contains('${{ parameters.Run_Stage }}', 'BootstrapAks'))
  #   dependsOn: Aks
  #   jobs:
  #     - job: BootStrap
  #       variables:
  #         clusters: $[ stageDependencies.Aks.DeployInfrastructure.outputs['setClusterNumbers.clusterNumbers'] ]
  #       steps:
  #         - template: pipeline-steps/bootstrap.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             serviceConnection: $(serviceConnection)


  - stage: DestroyAks
    displayName: 'Destroy AKS Infrastructure'
    condition: contains('${{ parameters.Run_Stage }}', 'DestroyAks')
    jobs:
      - job: DestroyInfrastructure
        steps:
          - template: pipeline-steps/destroy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: 'aks'
              project: $(project)
              tfversion: $(tfversion)
              tfInitSub: ${{ variables.tfInitSub }}
              ${{ if eq(parameters['cluster'], 'All') }}:
                targetCommand: ""
              ${{ if ne(parameters['cluster'], 'All') }}:
                targetCommand: "-target module.kubernetes[${{parameters.cluster}}]"
              builtFrom: $(Build.Repository.Name)
              product: ${{ variables.product }}
