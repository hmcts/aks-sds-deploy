parameters:
  - name: Run_Stage
    displayName: Stage to Run
    type: string
    default: 'Deploy_Full'
    values:
    - Deploy_Full
    - DeployAks00
    - DeployAks01
    - BootstrapAks00
    - BootstrapAks01
    - Deploy
    - DestroyAks00
    - DestroyAks01

  - name: location
    displayName: Location
    type: string
    default: 'UK South'
    values:
    - 'UK South'
    - 'UK West'

  - name: env
    displayName: Environment
    type: string
    default: 'SBOX'
    values:
    - ITHC
    - DEV
    - DEMO
    - SBOX
    - TEST
    - STG
    - PROD

name: HMCTS Shared Services AKS Azure Infrastructure Deployment Pipeline
trigger:
- none

variables:
  - name: gaServiceConnection
    value: OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  - name: tfversion
    value: 0.14.3
  # If another project comes along and wants to use the same pipeline file then make this a variable in the UI
  # but it might be better to template the pipeline more and have a different pipeline file
  # so that someone doesn't pick the wrong var in the dropdown
  - name: project
    value: ss
  # same comment as above ^^
  - name: serviceConnection
    value: DTS-SHAREDSERVICES-${{ parameters.env }}

stages:
  - stage: Genesis
    displayName: 'Genesis'
    condition: contains('${{ parameters.Run_Stage }}', 'Deploy_Full')
    jobs:
      - job: Genesis
        steps:
          - template: pipeline-steps/genesis.yaml
            parameters:
              gaServiceConnection: ${{ variables.gaServiceConnection }}
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '00-genesis'
              project: $(project)
              tfversion: $(tfversion)

  - stage: Network
    displayName: 'Network'
    condition: contains('${{ parameters.Run_Stage }}', 'Deploy_Full')
    jobs:
      - job: NetworkRg
        steps:
          - template: pipeline-steps/deploy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '07-network-rg'
              project: $(project)
              tfversion: $(tfversion)
      - job: DeployInfrastructure
        dependsOn: NetworkRg
        steps:
          - template: pipeline-steps/deploy-network.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '01-network'
              project: $(project)
              tfversion: $(tfversion)
              terraformServiceConnection: OPS-APPROVAL-GATE-MGMT-ENVS


  - stage: Managed_Identity
    displayName: 'Managed_Identity'
    condition: contains('${{ parameters.Run_Stage }}', 'Deploy_Full')
    dependsOn: Network
    jobs:
      - job: Managed_Identity
        steps:
          - template: pipeline-steps/managed_identity.yaml
            parameters:
              gaServiceConnection: ${{ variables.gaServiceConnection }}
              serviceConnection: $(serviceConnection)
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: managed-identity
              project: $(project)
              tfversion: $(tfversion)

  - stage: Aks00
    displayName: 'Deploy AKS 00'
    condition: or(contains('${{ parameters.Run_Stage }}', 'Deploy_Full'), contains('${{ parameters.Run_Stage }}', 'DeployAks00'))
    dependsOn:
      - Managed_Identity
    jobs:
      - job: DeployInfrastructure
        steps:
          - template: pipeline-steps/deploy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '03-aks00'
              project: $(project)
              tfversion: $(tfversion)


  - stage: Aks01
    displayName: 'Deploy AKS 01'
    condition: or(contains('${{ parameters.Run_Stage }}', 'Deploy_Full'), contains('${{ parameters.Run_Stage }}', 'DeployAks01'))
    variables:
      armClientSecret: $[ stageDependencies.ReadKeyVault.ReadKeyVault.outputs['SetSubscriptionSP.ARM_CLIENT_SECRET'] ]
      controlStorageAccount: $[ stageDependencies.ReadKeyVault.ReadKeyVault.outputs['SetControlVars.controlStorageAccount'] ]
    dependsOn:
      - Managed_Identity
    jobs:
      - job: DeployInfrastructure
        steps:
          - template: pipeline-steps/deploy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '04-aks01'
              project: $(project)
              tfversion: $(tfversion)

  - stage: BootStrapCluster00
    displayName: 'BootStrap Cluster 00'
    condition: or(contains('${{ parameters.Run_Stage }}', 'Deploy_Full'), contains('${{ parameters.Run_Stage }}', 'DeployAks00'), contains('${{ parameters.Run_Stage }}', 'BootstrapAks00'))
    dependsOn: Aks00
    jobs:
      - job: BootStrap
        steps:
          - template: pipeline-steps/bootstrap.yaml
            parameters:
              environment: ${{ parameters.env }}
              command: $(command)
              clusterName: '00'
              project: $(project)
              serviceConnection: $(serviceConnection)

  - stage: BootStrapCluster01
    displayName: 'BootStrap Cluster 01'
    condition: or(contains('${{ parameters.Run_Stage }}', 'Deploy_Full'), contains('${{ parameters.Run_Stage }}', 'DeployAks01'), contains('${{ parameters.Run_Stage }}', 'BootstrapAks01'))
    dependsOn: Aks01
    jobs:
      - job: BootStrap
        steps:
          - template: pipeline-steps/bootstrap.yaml
            parameters:
              environment: ${{ parameters.env }}
              command: $(command)
              clusterName: '01'
              project: $(project)
              serviceConnection: $(serviceConnection)

  - stage: DestroyAks00
    displayName: 'Destroy AKS 00 Infrastructure'
    condition: contains('${{ parameters.Run_Stage }}', 'DestroyAks00')
    jobs:
      - job: DestroyInfrastructure
        steps:
          - template: pipeline-steps/destroy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '03-aks00'
              project: $(project)
              tfversion: $(tfversion)

  - stage: DestroyAks01
    displayName: 'Destroy AKS 01 Infrastructure'
    condition: contains('${{ parameters.Run_Stage }}', 'DestroyAks01')
    jobs:
      - job: DestroyInfrastructure
        steps:
          - template: pipeline-steps/destroy-service.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: '04-aks01'
              project: $(project)
              tfversion: $(tfversion)
