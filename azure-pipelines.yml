name: ${{ parameters.overrideAction }} - ${{ parameters.env }}.${{ parameters.cluster }}.${{ parameters.location }}

trigger:
  batch: true
  branches:
    include:
    - master

resources:
  repositories:
  - repository: cnp-azuredevops-libraries
    type: github
    ref: master
    name: hmcts/cnp-azuredevops-libraries
    endpoint: 'hmcts-PlatformOperations'

variables:
  - name: agentPool
    value: "ubuntu-latest" 
  - name: build
    value: $(Build.BuildNumber)
  - name: product
    value: "sds-platform"
  - name: terraformInitSubscription
    value: 04d27a32-7a07-48b3-95b8-3c8691e1a263
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries
  - name: serviceConnection
    value: OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  - name: action
    value: ${{ parameters.overrideAction }}
  - name: project
    value: ss

parameters:
  - name: overrideAction
    displayName: Action
    type: string
    default: "plan"
    values:
      - plan
      - apply


  - name: cluster
    displayName: Cluster
    type: string
    default: "All"
    values:
      - "All"
      - "00"
      - "01"

  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"
      - "UK West"

  - name: env
    displayName: Environment
    type: string
    default: "sbox"
    values:
      - ithc
      - dev
      - demo
      - sbox
      - ptlsbox
      - test
      - stg
      - ptl
      - prod
      
  - name: environment_components
    type: object
    default:
    - deployment: demo-genesis
      environment: demo
      component: "00-genesis"
    
    - deployment: demo-network-rg
      environment: demo
      component: "07-network-rg"
      dependsOn:
        - demo-genesis

    - deployment: demo-network
      environment: demo
      component: "01-network"
      dependsOn:
        - demo_network_rg
    
    - deployment: demo-mis
      environment: demo
      component: "05-mis"
      dependsOn:
        - demo_network

    - deployment: demo-aks
      environment: demo
      component: "aks"
      dependsOn:
        - demo_mis

    - deployment: dev-genesis
      environment: dev
      component: "00-genesis"
 
    - deployment: dev-network-rg
      environment: dev
      component: "07-network-rg"
      dependsOn:
        - dev_genesis

    - deployment: dev-network
      environment: dev
      component: "01-network"
      dependsOn:
        - dev_network_rg
    
    - deployment: dev-mis
      environment: dev
      component: "05-mis"
      dependsOn:
        - dev_network

    - deployment: dev-aks
      environment: dev
      component: "aks"
      dependsOn:
        - dev_mis

    - deployment: ithc-genesis
      environment: ithc
      component: "00-genesis"

    - deployment:  ithc-network-rg
      environment:  ithc
      component: "07-network-rg"
      dependsOn:
        - ithc_genesis

    - deployment:  ithc-network
      environment:  ithc
      component: "01-network"
      dependsOn:
        - ithc_network_rg
    
    - deployment:  ithc-mis
      environment:  ithc
      component: "05-mis"
      dependsOn:
        - ithc_network

    - deployment:  ithc-aks
      environment:  ithc
      component: "aks"
      dependsOn:
        - ithc_mis

    - deployment: prod-genesis
      environment: prod
      component: "00-genesis"

    - deployment: prod-network-rg
      environment: prod
      component: "07-network-rg"
      dependsOn:
        - prod_genesis

    - deployment: prod-network
      environment: prod
      component: "01-network"
      dependsOn:
        - prod_network_rg
    
    - deployment: prod-mis
      environment: prod
      component: "05-mis"
      dependsOn:
        - prod_network

    - deployment: prod-aks
      environment: prod
      component: "aks"
      dependsOn:
        - prod_mis

    - deployment: ptl-genesis
      environment: ptl
      component: "00-genesis"

    - deployment: ptl-network-rg
      environment: ptl
      component: "07-network-rg"
      dependsOn:
        -     ptl_genesis

    - deployment:  ptl-network
      environment:  ptl
      component: "01-network"
      dependsOn:
        - ptl_network_rg
    
    - deployment: ptl-mis
      environment: ptl
      component: "05-mis"
      dependsOn:
        -  ptl_network

    - deployment: ptl-aks
      environment: ptl
      component: "aks"
      dependsOn:
        - ptl_mis
   
    - deployment: ptlsbox-genesis
      environment: ptlsbox
      component: "00-genesis"

    - deployment:  ptlsbox-network-rg
      environment: ptlsbox
      component: "07-network-rg"
      dependsOn:
        - ptlsbox_genesis

    - deployment:  ptlsbox-network
      environment:  ptlsbox
      component: "01-network"
      dependsOn:
        - ptlsbox_network_rg
    
    - deployment: ptlsbox-mis
      environment: ptlsbox
      component: "05-mis"
      dependsOn:
        - ptlsbox_network

    - deployment: ptlsbox-aks
      environment: ptlsbox
      component: "aks"
      dependsOn:
        - ptlsbox_mis

    - deployment: sbox-genesis
      environment: sbox
      component: "00-genesis"

    - deployment:  sbox-network-rg
      environment: sbox
      component: "07-network-rg"
      dependsOn:
        - sbox_genesis

    - deployment:  sbox-network
      environment:  sbox
      component: "01-network"
      dependsOn:
        - sbox_network_rg
    
    - deployment: sbox-mis
      environment: sbox
      component: "05-mis"
      dependsOn:
      -  sbox_network

    - deployment: sbox-aks
      environment: sbox
      component: "aks"
      dependsOn:
        - sbox_mis
 
    - deployment: stg-genesis
      environment: stg
      component: "00-genesis"

    - deployment: stg-network-rg
      environment: stg
      component: "07-network-rg"
      dependsOn:
        - stg_genesis

    - deployment: stg-network
      environment: stg
      component: "01-network"
      dependsOn:
        -  stg_network_rg
    
    - deployment: stg-mis
      environment: stg
      component: "05-mis"
      dependsOn:
        - stg_network

    - deployment: stg-aks
      environment: stg
      component: "aks"
      dependsOn:
        - stg_mis

    - deployment: test-genesis
      environment: test
      component: "00-genesis"

    - deployment: test-network-rg
      environment: test
      component: "07-network-rg"
      dependsOn:
        - test_genesis

    - deployment: test-network
      environment: test
      component: "01-network"
      dependsOn:
        - test_network_rg
    
    - deployment: test-mis
      environment: test
      component: "05-mis"
      dependsOn:
        - test_network

    - deployment: test-aks
      environment: test
      component: "aks"
      dependsOn:
        - test_mis  

stages:
  - ${{ each deployment in parameters.environment_components }}:
    - ${{ if eq(parameters.env, deployment.environment) }}:
      - stage: ${{ deployment.deployment }}
        dependsOn: ${{ deployment.dependsOn }}
        condition: succeeded()
        jobs:
          - job: TerraformPlanApply
            pool:
              vmImage: ${{ variables.agentPool }}
            steps:
              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.overrideAction }}
                  environment: ${{ deployment.environment }}
                  component: ${{ deployment.component }}
                  serviceConnection: ${{ variables.serviceConnection }}
                  terraformInitSubscription: ${{ variables.terraformInitSubscription }}
                  product: ${{ variables.product }}
                  kvConnectedServiceName: ${{ variables.serviceConnection }}
                  planCommandOptions: >
                    -var project=${{ variables.project }}
                    -var subscription_id=$(ARM_SUBSCRIPTION_ID)
                    -var environment=${{ deployment.environment }}
                    -var control_vault=$(controlKeyVault)
                    -lock=false

      - stage: BootStrapClusters-${{ deployment.deployment }}
        displayName: "BootStrap Clusters"
        dependsOn: ${{ parameters.env }}_aks
        jobs:
          - job: BootStrap
            variables:
              ${{ if eq(parameters['cluster'], 'All') }}:
                clusters: $[ stageDependencies.${{ parameters.env }}_aks.TerraformPlanApply.outputs['setClusterNumbers.clusterNumbers'] ]
              ${{ if ne(parameters['cluster'], 'All') }}:
                clusters: ${{ parameters.cluster }}
            steps:
              - template: pipeline-steps/bootstrap.yaml
                parameters:
                  environment: ${{ parameters.env }}
              
