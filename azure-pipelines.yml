name: ${{ parameters.action }} - ${{ parameters.env }}.${{ parameters.cluster }}.${{ parameters.location }}

trigger: none

pool:
  vmImage: "ubuntu-latest"

resources:
  repositories:
    - repository: cnp-azuredevops-libraries
      type: github
      ref: refs/heads/DTSPO-9695-make-tf-varfile-configurable 
      name: hmcts//cnp-azuredevops-libraries
      endpoint: 'hmcts-PlatformOperations'

parameters:
  - name: action
    displayName: action
    type: string
    default: "plan"
    values:
      - plan
      - apply

  - name: cluster
    displayName: Cluster
    type: string
    default: "All"
    values:
      - "All"
      - "00"
      - "01"

  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"
      - "UK West"

  - name: env
    displayName: Environment
    type: string
    default: "sbox"
    values:
      - ithc
      - dev
      - demo
      - sbox
      - ptlsbox
      - test
      - stg
      - ptl
      - prod

variables:
  
  - name: project
    value: ss

  - name: serviceConnection
    value: OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  - name: tfInitSub
    value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  - name: product
    value: "sds-platform"
  - name: action
    value: ${{ parameters.action }}

stages:
  - stage: Genesis
    displayName: "Genesis"
    jobs:
      - job: Genesis
        steps:
          - template: pipeline-steps/genesis.yaml
            parameters:
              environment: ${{ parameters.env }}
              location: ${{ parameters.location }}
              stack: "00-genesis"
              project: $(project)
              tfInitSub: ${{ variables.tfInitSub }}
              action: ${{ parameters.action }}

  # - stage: Network
  #   displayName: "Network"
  #   jobs:
  #     - job: NetworkRg
  #       steps:
  #         - template: pipeline-steps/deploy-service.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: "07-network-rg"
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             tfInitSub: ${{ variables.tfInitSub }}
  #             builtFrom: $(Build.Repository.Name)
  #             product: ${{ variables.product }}

  #     - job: DeployInfrastructure
  #       dependsOn: NetworkRg
  #       steps:
  #         - template: pipeline-steps/deploy-network.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: "01-network"
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             terraformServiceConnection: OPS-APPROVAL-GATE-MGMT-ENVS
  #             tfInitSub: ${{ variables.tfInitSub }}
  #             builtFrom: $(Build.Repository.Name)
  #             product: ${{ variables.product }}

  # - stage: Managed_Identity
  #   displayName: "Managed_Identity"
  #   dependsOn: Network
  #   jobs:
  #     - job: Managed_Identity
  #       steps:
  #         - template: pipeline-steps/managed_identity.yaml
  #           parameters:
  #             serviceConnection: $(serviceConnection)
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: "05-mis"
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             tfInitSub: ${{ variables.tfInitSub }}
  #             builtFrom: $(Build.Repository.Name)
  #             product: ${{ variables.product }}

  # - stage: Aks
  #   displayName: "AKS clusters"
  #   dependsOn:
  #     - Managed_Identity
  #   jobs:
  #     - job: DeployInfrastructure
  #       steps:
  #         - template: pipeline-steps/deploy-service.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             location: ${{ parameters.location }}
  #             stack: "aks"
  #             project: $(project)
  #             tfversion: $(tfversion)
  #             tfInitSub: ${{ variables.tfInitSub }}
  #             builtFrom: $(Build.Repository.Name)
  #             product: ${{ variables.product }}
  #             ${{ if ne(parameters['cluster'], 'All') }}:
  #               targetCommand: '-target azurerm_resource_group.kubernetes_resource_group["\"${{parameters.cluster}}\""] -target module.kubernetes["\"${{parameters.cluster}}\""] -target azurerm_role_assignment.dev_to_stg["\"${{parameters.cluster}}\""] -target data.azurerm_resource_group.mi_stg_rg[0]'

  # - stage: BootStrapClusters
  #   displayName: "BootStrap Clusters"
  #   dependsOn: Aks
  #   jobs:
  #     - job: BootStrap
  #       variables:
  #         ${{ if eq(parameters['cluster'], 'All') }}:
  #           clusters: $[ stageDependencies.Aks.DeployInfrastructure.outputs['setClusterNumbers.clusterNumbers'] ]
  #         ${{ if ne(parameters['cluster'], 'All') }}:
  #           clusters: ${{ parameters.cluster }}
  #       steps:
  #         - template: pipeline-steps/bootstrap.yaml
  #           parameters:
  #             environment: ${{ parameters.env }}
  #             serviceConnection: $(serviceConnection)
