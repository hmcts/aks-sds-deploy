name: ${{ parameters.Action }} - ${{ parameters.env }}.${{ parameters.cluster }}.${{ parameters.location }}

# TODO refactor pipeline to do plan by default, for now pls no trigger


trigger:
  batch: true
  branches:
    include:
    - master

resources:
  repositories:
  - repository: cnp-azuredevops-libraries
    type: github
    ref: master
    name: hmcts/cnp-azuredevops-libraries
    endpoint: 'hmcts-PlatformOperations'

variables:
  - name: agentPool
    value: "ubuntu-latest" 
  - name: build
    value: $(Build.BuildNumber)
  - name: product
    value: "sds-platform"
  - name: terraformInitSubscription
    value: 04d27a32-7a07-48b3-95b8-3c8691e1a263
  - template: vars/input-variables.yaml@cnp-azuredevops-libraries
  - name: serviceConnection
    value: OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  - name: action
    value: ${{ parameters.Action }}


  # - name: project
  #   value: ss
  # same comment as above ^^
  # - name: serviceConnection
  #   value: OPS-APPROVAL-GATE-${{ parameters.env }}-ENVS
  # - name: tfInitSub
  #   value: "04d27a32-7a07-48b3-95b8-3c8691e1a263"
  # - name: product
  #   value: "sds-platform"
  # - name: action
  #   value: ${{ parameters.Action }}

parameters:
  - name: Action
    displayName: Action
    type: string
    default: "Plan"
    values:
      - Plan
      - Apply


  - name: cluster
    displayName: Cluster
    type: string
    default: "All"
    values:
      - "All"
      - "00"
      - "01"

  - name: location
    displayName: Location
    type: string
    default: "UK South"
    values:
      - "UK South"
      - "UK West"

  - name: env
    displayName: Environment
    type: string
    default: "sbox"
    values:
      - ithc
      - dev
      - demo
      - sbox
      - ptlsbox
      - test
      - stg
      - ptl
      - prod
      
  - name: environment_components
    type: object
    default:
    - deployment: demo_genesis
      environment: demo
      component: "00-genesis"
    
    - deployment: demo_network_rg
      environment: demo
      component: "07-network-rg"
      dependsOn:
        - demo_genesis


    - deployment: demo_network
      environment: demo
      component: "01-network"
      dependsOn:
        - demo_network_rg
    
    - deployment: demo_mis
      environment: demo
      component: "05-mis"
      dependsOn:
        - demo_network

    - deployment: demo_aks
      environment: demo
      component: "aks"
      dependsOn:
        - demo_mis

    - deployment: dev_genesis
      environment: dev
      component: "00-genesis"
 
    - deployment: dev_network_rg
      environment: dev
      component: "07-network-rg"
      dependsOn:
        -  dev_genesis


    - deployment: dev_network
      environment: dev
      component: "01-network"
      dependsOn:
        -  dev_network_rg
    
    - deployment: dev_mis
      environment: dev
      component: "05-mis"
      dependsOn:
        -  dev_network

    - deployment: dev_aks
      environment: dev
      component: "aks"
      dependsOn:
        -  dev_mis

    - deployment: ithc_genesis
      environment: ithc
      component: "00-genesis"


    - deployment:  ithc_network_rg
      environment:  ithc
      component: "07-network-rg"
      dependsOn:
        -   ithc_genesis


    - deployment:  ithc_network
      environment:  ithc
      component: "01-network"
      dependsOn:
        -   ithc_network_rg
    
    - deployment:  ithc_mis
      environment:  ithc
      component: "05-mis"
      dependsOn:
        -   ithc_network

    - deployment:  ithc_aks
      environment:  ithc
      component: "aks"
      dependsOn:
        -   ithc_mis


    - deployment: prod_genesis
      environment: prod
      component: "00-genesis"


    - deployment: prod_network_rg
      environment: prod
      component: "07-network-rg"
      dependsOn:
        - prod_genesis


    - deployment: prod_network
      environment: prod
      component: "01-network"
      dependsOn:
        - prod_network_rg
    
    - deployment: prod_mis
      environment: prod
      component: "05-mis"
      dependsOn:
        - prod_network

    - deployment: prod_aks
      environment: prod
      component: "aks"
      dependsOn:
        - prod_mis

    - deployment: ptl_genesis
      environment: ptl
      component: "00-genesis"

    - deployment: ptl_network_rg
      environment: ptl
      component: "07-network-rg"
      dependsOn:
        -     ptl_genesis

    - deployment:  ptl_network
      environment:  ptl
      component: "01-network"
      dependsOn:
        - ptl_network_rg
    
    - deployment: ptl_mis
      environment: ptl
      component: "05-mis"
      dependsOn:
        -     ptl_network

    - deployment: ptl_aks
      environment: ptl
      component: "aks"
      dependsOn:
        - ptl_mis

        
    - deployment: ptlsbox_genisis
      environment: ptlsbox
      component: "00-genesis"

    - deployment:  ptlsbox_network_rg
      environment: ptlsbox
      component: "07-network-rg"
      dependsOn:
        - ptlsbox_genesis

    - deployment:  ptlsbox_network
      environment:  ptlsbox
      component: "01-network"
      dependsOn:
        - ptlsbox_network_rg
    
    - deployment: ptlsbox_mis
      environment: ptlsbox
      component: "05-mis"
      dependsOn:
        -     ptlsbox_network

    - deployment: ptlsbox_aks
      environment: ptlsbox
      component: "aks"
      dependsOn:
        - ptlsbox_mis


    - deployment: sandbox_genesis
      environment: sbox
      component: "00-genesis"


    - deployment:  sandbox_network_rg
      environment: sbox
      component: "07-network-rg"
      dependsOn:
        - sandbox_genesis

    - deployment:  sandbox_network
      environment:  sbox
      component: "01-network"
      dependsOn:
        - sandbox_network_rg
    
    - deployment: sandbox_mis
      environment: sbox
      component: "05-mis"
      dependsOn:
      -  sandbox_network

    - deployment: sandbox_aks
      environment: sbox
      component: "aks"
      dependsOn:
        - sandbox_mis

      
    - deployment: staging_genesis
      environment: stg
      component: "00-genesis"

    - deployment: staging_network_rg
      environment: stg
      component: "07-network-rg"
      dependsOn:
        - staging_genesis

    - deployment: staging_network
      environment: stg
      component: "01-network"
      dependsOn:
        -  staging_network_rg
    
    - deployment: staging_mis
      environment: stg
      component: "05-mis"
      dependsOn:
        -  staging_network

    - deployment: staging_aks
      environment: stg
      component: "aks"
      dependsOn:
        -   staging_mis


    - deployment: test_genesis
      environment: test
      component: "00-genesis"

    - deployment: test_network_rg
      environment: test
      component: "07-network-rg"
      dependsOn:
        - test_genesis

    - deployment: test_network
      environment: test
      component: "01-network"
      dependsOn:
        - test_network_rg
    
    - deployment: test_mis
      environment: test
      component: "05-mis"
      dependsOn:
        - test_network

    - deployment: test_aks
      environment: test
      component: "aks"
      dependsOn:
        - test_mis  


stages:
  - ${{ each deployment in parameters.environment_components }}:
      - stage: ${{ deployment.deployment }}
        dependsOn: ${{ deployment.dependsOn }}
        condition: eq(parameters.env, deployment.environment)
        jobs:
          - job: TerraformPlanApply
            pool:
              vmImage: ${{ variables.agentPool }}
            steps:
              - template: steps/terraform.yaml@cnp-azuredevops-libraries
                parameters:
                  overrideAction: ${{ parameters.overrideAction }}
                  environment: ${{ deployment.environment }}
                  component: ${{ deployment.component }}
                  serviceConnection: ${{ variables.serviceConnection }}
                  terraformInitSubscription: ${{ variables.terraformInitSubscription }}
                  product: ${{ variables.product }}
                  kvConnectedServiceName: ${{ variables.serviceConnection }}


# stages:
#   - stage: Genesis
#     displayName: "Genesis"
#     jobs:
#       - job: Genesis
#         steps:
#           - template: pipeline-steps/genesis.yaml
#             parameters:
#               environment: ${{ parameters.env }}
#               location: ${{ parameters.location }}
#               stack: "00-genesis"
#               project: $(project)
#               tfversion: $(tfversion)
#               tfInitSub: ${{ variables.tfInitSub }}
#               builtFrom: $(Build.Repository.Name)
#               product: ${{ variables.product }}

#   - stage: Network
#     displayName: "Network"
#     jobs:
#       - job: NetworkRg
#         steps:
#           - template: pipeline-steps/deploy-service.yaml
#             parameters:
#               environment: ${{ parameters.env }}
#               location: ${{ parameters.location }}
#               stack: "07-network-rg"
#               project: $(project)
#               tfversion: $(tfversion)
#               tfInitSub: ${{ variables.tfInitSub }}
#               builtFrom: $(Build.Repository.Name)
#               product: ${{ variables.product }}

#       - job: DeployInfrastructure
#         dependsOn: NetworkRg
#         steps:
#           - template: pipeline-steps/deploy-network.yaml
#             parameters:
#               environment: ${{ parameters.env }}
#               location: ${{ parameters.location }}
#               stack: "01-network"
#               project: $(project)
#               tfversion: $(tfversion)
#               terraformServiceConnection: OPS-APPROVAL-GATE-MGMT-ENVS
#               tfInitSub: ${{ variables.tfInitSub }}
#               builtFrom: $(Build.Repository.Name)
#               product: ${{ variables.product }}

#   - stage: Managed_Identity
#     displayName: "Managed_Identity"
#     dependsOn: Network
#     jobs:
#       - job: Managed_Identity
#         steps:
#           - template: pipeline-steps/managed_identity.yaml
#             parameters:
#               serviceConnection: $(serviceConnection)
#               environment: ${{ parameters.env }}
#               location: ${{ parameters.location }}
#               stack: "05-mis"
#               project: $(project)
#               tfversion: $(tfversion)
#               tfInitSub: ${{ variables.tfInitSub }}
#               builtFrom: $(Build.Repository.Name)
#               product: ${{ variables.product }}

#   - stage: Aks
#     displayName: "AKS clusters"
#     dependsOn:
#       - Managed_Identity
#     jobs:
#       - job: DeployInfrastructure
#         steps:
#           - template: pipeline-steps/deploy-service.yaml
#             parameters:
#               environment: ${{ parameters.env }}
#               location: ${{ parameters.location }}
#               stack: "aks"
#               project: $(project)
#               tfversion: $(tfversion)
#               tfInitSub: ${{ variables.tfInitSub }}
#               builtFrom: $(Build.Repository.Name)
#               product: ${{ variables.product }}
#               ${{ if ne(parameters['cluster'], 'All') }}:
#                 targetCommand: '-target azurerm_resource_group.kubernetes_resource_group["\"${{parameters.cluster}}\""] -target module.kubernetes["\"${{parameters.cluster}}\""] -target azurerm_role_assignment.dev_to_stg["\"${{parameters.cluster}}\""] -target data.azurerm_resource_group.mi_stg_rg[0]'

#   - stage: BootStrapClusters
#     displayName: "BootStrap Clusters"
#     dependsOn: Aks
#     jobs:
#       - job: BootStrap
#         variables:
#           ${{ if eq(parameters['cluster'], 'All') }}:
#             clusters: $[ stageDependencies.Aks.DeployInfrastructure.outputs['setClusterNumbers.clusterNumbers'] ]
#           ${{ if ne(parameters['cluster'], 'All') }}:
#             clusters: ${{ parameters.cluster }}
#         steps:
#           - template: pipeline-steps/bootstrap.yaml
#             parameters:
#               environment: ${{ parameters.env }}
#               serviceConnection: $(serviceConnection)
