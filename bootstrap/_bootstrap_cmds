#!/usr/bin/env bash

COMMANDS=$(cat _bootstrap_cmds | grep "^function" | awk '{print $2}' | grep -v "^_" | tr "\n" " " )

############################################################
PROJECT="${1}"
SERVICE="${2}"
ENVIRONMENT="${3}"
az_keyvault_name="${4}"
SUBSCRIPTION_NAME="${5}"
CLUSTER_NAME="${6}"
tags="Environment=${ENVIRONMENT} Service=${SERVICE} Project=${PROJECT} Created_By="Bootstrap""
############################################################
HELM_OPERATOR_VER="1.2.0"

#flux_repo_list="k8s/${ENVIRONMENT}\,k8s/common"

### Note Automation cluster Name lookup later
# CLUSTER_NAME="00"
flux_repo_list="k8s/environments/${ENVIRONMENT}/cluster-${CLUSTER_NAME}\,k8s/environments/${ENVIRONMENT}/cluster-${CLUSTER_NAME}-overlay\,k8s/environments/${ENVIRONMENT}/common\,k8s/environments/${ENVIRONMENT}/common-overlay\,k8s/common"



###########################################################
# Un-Commnent when running locally
###########################################################

#AGENT_BUILDDIRECTORY=/tmp

############################################################
# functions
############################################################

function _debug {
    echo "${PROJECT}" "${SERVICE}" "${ENVIRONMENT}" "${az_keyvault_name}" "${SUBSCRIPTION_NAME}" "${COMMAND}"
}

get_ops() {
  while getopts "dv" opt; do
    case $opt in
      v)
        local opt_verbose=1
        ;;
      d)
        local opt_debug=1
        ;;
    esac
  done
  readonly VERBOSE=${opt_verbose:-0}
  readonly DEBUG=${opt_debug:-0}
}

############################################################
# get az creds
function _az_login {
   az login \
    --service-principal \
    --username=${ARM_CLIENT_ID} \
    --password=${ARM_CLIENT_SECRET} \
    --tenant=${ARM_TENANT_ID}
}

############################################################
# az account set
function _az_account_set {
   az account set \
    --subscription ${SUBSCRIPTION_NAME}
}

############################################################
# get az creds
function _az_aks_get_credentials {
   az aks get-credentials \
    --resource-group "${PROJECT}"-"${ENVIRONMENT}"-"${CLUSTER_NAME}"-rg \
    --name "${PROJECT}"-"${ENVIRONMENT}"-"${CLUSTER_NAME}"-"${SERVICE}" \
    --admin \
    --overwrite-existing
}

############################################################
# kubectl rbac

function _rbac_apply_default {
    echo "Applying Default Rbac"
    cat ../kubernetes/rbac/default-rbac.yaml | \
    sed -e 's@${CLUSTER_READ_ONLY_GROUP}@'"$(az keyvault secret show --vault-name ${az_keyvault_name}  --name 'aks-user-rbac-group-id' --query 'value' -o tsv)"'@'  | \
        kubectl apply -f -

}

############################################################
# SSH Key Creation

function _sshkey_create {
    var_exist="$(az keyvault secret show --vault-name ${az_keyvault_name} --name 'flux-ssh-git-key-private' --query value -o tsv)"
    if test -z "$var_exist"
    then
            echo "SSHKey Setup"
            ssh-keygen -t rsa -f $AGENT_BUILDDIRECTORY/flux-ssh-git-key -q -P "" -C ""
            az keyvault secret set --name flux-ssh-git-key-private --vault-name ${az_keyvault_name} --file $AGENT_BUILDDIRECTORY/flux-ssh-git-key
            az keyvault secret set --name flux-ssh-git-key-public --vault-name ${az_keyvault_name} --file $AGENT_BUILDDIRECTORY/flux-ssh-git-key.pub
            rm -f $AGENT_BUILDDIRECTORY/flux-ssh-git-key*
    else
            echo "SSHKey Download"
            az keyvault secret download --name flux-ssh-git-key-private --vault-name ${az_keyvault_name} --file $AGENT_BUILDDIRECTORY/flux-ssh-git-key --encoding ascii
            az keyvault secret download --name flux-ssh-git-key-public --vault-name ${az_keyvault_name} --file $AGENT_BUILDDIRECTORY/flux-ssh-git-key.pub --encoding ascii
    fi

}

function _sshkey_cleanup {
    if [ -f $AGENT_BUILDDIRECTORY/flux-ssh-git-key ]; then
        echo "Deleting SSH Private Key"
        rm -f $AGENT_BUILDDIRECTORY/flux-ssh-git-key
    fi
    if [ -f $AGENT_BUILDDIRECTORY/flux-ssh-git-key.pub ]; then
        echo "Deleting SSH Public Key"
        rm -f $AGENT_BUILDDIRECTORY/flux-ssh-git-key.pub
    fi
}

############################################################
# Fluxcd

function _helm_add_repo {
    echo "Adding flux repo"
    helm repo add fluxcd https://charts.fluxcd.io \
    --namespace admin
}


function _helm_apply_crd {
    echo "Kubectl apply fluxcd"
    kubectl apply -f https://raw.githubusercontent.com/fluxcd/helm-operator/${HELM_OPERATOR_VER}/deploy/crds.yaml
}

function _flux_create_namespace {
    if [[ $(kubectl get ns | grep admin) ]]; then
        echo "already exists - continuing"
    else
        kubectl create ns admin
    fi
}

function _flux_ssh_git_key {
        echo " Kubectl Create Secret"
        kubectl create secret generic flux-git-deploy \
        --from-file=identity=$AGENT_BUILDDIRECTORY/flux-ssh-git-key \
        --namespace admin \
        --dry-run=client -o yaml | kubectl apply -f -
}

function _flux_install {
    echo "helm install"
    helm upgrade -i flux fluxcd/flux -f ../kubernetes/charts/fluxcd/${PROJECT}-values.yaml \
    --set git.path=${1}\
    --set git.label=${2}-${CLUSTER_NAME} \
    --set helm.versions=${3} \
    --namespace admin
}

function _flux_helm_operator_install {
    echo "helm install helm operator"
    helm upgrade -i helm-operator fluxcd/helm-operator --wait -f ../kubernetes/charts/fluxcd/helm-operator-values.yaml \
    --namespace admin
}

function _pod_identity_components {
    echo "Deploying AAD Pod Identity"

    #Install kustomize
  curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
  TMP_DIR=$AGENT_BUILDDIRECTORY/aad-pod-identity
  rm -rf ${TMP_DIR}
  mkdir -p $TMP_DIR/admin
# -----------------------------------------------------------
(
cat <<EOF
apiVersion: kustomize.config.k8s.io/v1beta1
namespace: admin
kind: Kustomization
commonLabels:
  k8s-app: aad-pod-id
resources:
  - https://raw.githubusercontent.com/Azure/aad-pod-identity/v1.7.1/deploy/infra/deployment-rbac.yaml
patchesStrategicMerge:
  - https://raw.githubusercontent.com/hmcts/shared-services-flux/master/k8s/namespaces/admin/aad-pod-identity/patches/aad-pod-id.yaml
EOF
) > "${TMP_DIR}/admin/kustomization.yaml"

# -----------------------------------------------------------

  ./kustomize build ${TMP_DIR}/admin |  kubectl apply -f -
  # workaround 'unable to recognize "STDIN": no matches for kind "AzurePodIdentityException" in version "aadpodidentity.k8s.io/v1"'
  sleep 1
  kubectl apply -f https://raw.githubusercontent.com/hmcts/shared-services-flux/master/k8s/namespaces/admin/aad-pod-identity/mic-exception.yaml
  kubectl apply -f https://raw.githubusercontent.com/hmcts/shared-services-flux/master/k8s/namespaces/kube-system/aad-pod-identity/mic-exception.yaml

  rm -rf ${TMP_DIR}
}

function _pod_identity_flux_sop_setup {
    echo "SOPS MI Role"
    cat ../kubernetes/charts/aad-pod-identities/aks-sops-role.yaml | \
    sed -e 's@MI_RESOURCE_ID@'"$(az identity show --resource-group 'genesis-rg' --name aks-${ENVIRONMENT}-mi --query 'id' | sed 's/"//g')"'@' | \
    sed -e 's@MI_CLIENTID@'"$(az identity show --resource-group 'genesis-rg' --name aks-${ENVIRONMENT}-mi --query 'clientId' | sed 's/"//g')"'@' | \
    kubectl apply -f -
}

function _error_exit {
	echo "$1" 1>&2
    echo "Stopping..."
    #cleanup
	exit 1
}


function _kubectl_rbac {
    _rbac_apply_default
}

function _deploy_flux {
    _flux_create_namespace
    _pod_identity_components
    _pod_identity_flux_sop_setup
    # give a bit of time for identity to sync so that flux start's correctly first time
    sleep 60
    _helm_add_repo
    echo "****  repo added ****"
    _helm_apply_crd ${HELM_OPERATOR_VER}
    _flux_ssh_git_key
    echo "****  ssh key added ****"
    _flux_install ${flux_repo_list} ${ENVIRONMENT} v3
    echo "****  flux is now installed ****"
    _flux_helm_operator_install
    echo "**** helm operator is now installed ****"
}

# #############################################################


function deploy {
    echo "Starting Deployment"
    _az_aks_get_credentials  || _error_exit "ERROR: Unable to get AKS credentials"
    _sshkey_create || _error_exit "ERROR: SSHKey Create Issues"
    _kubectl_rbac  || _error_exit "ERROR: Unable to set k8s RBAC"
    _deploy_flux || _error_exit "ERROR: Unable to deploy Fluxcd"
    echo "Cleanup"
    _sshkey_cleanup || _error_exit "ERROR: Unable to Cleanup"
    echo "Deployment Complete"
}
